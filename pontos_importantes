ESTRUTURA
 Um projeto do tipo react usa basicamente 3 diretorios e 4 arquivos 

 diretorios 
 node_modules -> resposnavel por gusradar todas as dependencias do react 
                que vão se usadas pra fazer ele funcionar.
  
 public - > essa pasta contem os aqruivos publicos que vão ser exibidos 
            o index.html as imagens que vão aparecr no front.

  src  -> são os scripts js que vão definir o comportamento da aplicação 
        e enessa pasta que ficam os codigos.


JSX 
 o JSX equivale a escrever html porem compilado por javascript, existem algumas diferenças de tipagem 
 e recursos, em algums casos quando esquecemos de fechar uma tag o navegador fecha ela usando
 um recurso chamado degradação graciosa. exatamente pra evitar problemas no layout, no 
 jsx se esquecemos de fechar uma tag ele não compila aplicação ela mostra o erro para que
 ele seja corrigido. 

 const Componente = <h1> conteudo do Componente </h1>

 possibilidades basicas do jsx o script abaxi fica dentro do arquivo app.js 
 que pertence a apsta src, basicamente devemos considerar 3 espaços o espaço superior 
 a função app serve para importar classes e recursos que a apilicação vai precisar usar 
 dentro da função app é ode o jsx vai funcionar  e a parte inferior tem uma diretiva que 
 serve para litramente jogaro elemento dela ra fora para que ele fique acessivel para ser 
 carregado e executado.

 as variveis são declaradas dentro da função app e fora da função return 
 a função return como o nome ja diz ela so retorna os componetes, no codigo abaixo 
 existem 3 tipos de retorno 

 retorno de valor de variavel concatenado 
 retorno de um função 
 pode se dizer que esse é um componente 
------------------------------------------------------------------------------
import './App.css';

function App() {

   const name = "ivan"

   const newName = name.toUpperCase()

   function sum(a,b){
     return a + b
   }


  return (
    <div className="App">

      <h2>Aterando o jsx</h2>
      <h2>Olá,{newName}</h2>
      <h2>soma: {sum(1,2)}</h2>
       
      
    </div>
  );
}

export default App;

-----------------------------------------------------------------------
a pasta node modules esta sendo ignorada pelo git por isso tem que reinstalar toda vez que for transferir o projeto
issoi aocntece somente acom a pasta node_modeules 
---------------------------------------------------------------------------
CRIANDO COMPONENTES
  Os componentes ficam dentro da pasta src como um aplicativo react pode ter muitos componetes é um convençaõ criar uma apsta chamada 
  components e dentro dela fazer a divisão dos componetes por tipo usando uma pasta interne para cada tipo de componente mas nesse caso 
  eu vou iniciar colocando só a pasta components mesmo.

  dentro dela eu vou colocar o compoente HelloWorld.js é importante atentar para outra convenção de nomenclatura as palavras possuem sempre
  a primeira letra maiuscula.

  O compoente e basicamente uma função javascrpt que retorna um jsx 


  --------------------------------------------------
  function HelloWorld(){

        return(

            <div>
                
            <h1> Meu primeiro componente </h1>

            </div>

        )
    }

    export default HelloWorld;
  --------------------------------------------------    

  para chamar um compoente pra ele aparecer de fato e necessario importar ele dentro do arquivo app.js
  usando essa diretiva 

  import HelloWorld from './components/HelloWorld'

  A teoria dos componetes consiste tambem na reutilização deles um componen pode ser importado de qualquer lugar 
  não precisa ser encessariamente da pasta padrão mas cporquestões de organização é bom que seja, no caso abaxo 
  eu criei outro componente chamado frase que vai ser importado dentro do compoente HelloWorld.js e vai ser renderizado pelo app.js 
  por herança ou seja um compoente dentro do outro.assim eles pode ser reaproveitados varias vezes.em varios lugares dentro da mesma
  pagina.

  No codigo abaixo eu coloco o compoente frase dentro do component HelloWorld.

          import Frase from './Frase'

          function HelloWorld(){

              return(

                  <div>
                  
                  <Frase/>    
                  <h1> Meu primeiro componente </h1>

                  </div>

              )
          }

          export default HelloWorld;

    -----------------------------------------------------------------------------------------------------------------
    PROPS 

      funciona como um objeto coringa a função do componente recebe um props como parametro e retorna um atributo especifico do props
      no caso abaixo props.nome esse atributo nome passa a existir quando ele epassado pelo elemento   

            function SayMyName(props){

                return(

                    <h1>Fala ai {props.nome}, suave ?</h1>
                )

            }

            export default SayMyName;  

        Aqui eo compomente na app.js recebendo o nome como parametro e eo valor 
        ---------------------------------------------------------------------------------------
         
                import './App.css';
                import HelloWorld from './components/HelloWorld'
                import SayMyName from './components/SayMyName'

                function App() {
                  return (
                    <div className="App">
                      <HelloWorld/>
                      <SayMyName nome="ivan" />
                    </div>
                  );
                }

                export default App; 
    ---------------------------------------------------------------------------------------------------
    
    ou seja ele se comporta como um objeto coringa que recebe qual quer atributo passado a ele 
    mais o porps e dinamico eo o paramentro pode receber mais que um valor. conforme a necessidade o componete eo mesmo 
    so muda o valor. 


        import './App.css';
                import HelloWorld from './components/HelloWorld'
                import SayMyName from './components/SayMyName'

                function App() {
                  return (
                    <div className="App">
                      <HelloWorld/>
                      <SayMyName nome="ivan" />
                      <SayMyName nome="jose" />
                    </div>
                  );
                }

                export default App; 

    ---------------------------------------------------------------------------------------------

    UM EXEMPLO DE UM ELEMENTOS COM VARIOS ATRIBUTOS 

              function Pessoa(props){

              return(
                
                  <div>

                      <img src={props.foto} alt={props.nome} />
                      <h2>Nome: {props.nome}</h2>
                      <h2>Idade: {props.idade}</h2>
                      <h2>Profissão: {props.profissao}</h2>

                  </div>
                  

              )


          }

          export default Pessoa 


    um problema nesse caso pode ser a repétição do termo props

    a refatoração para corrigir isso pode ser jogando os tributos direto nos parametros 


       function Pessoa({nome,idade,profissao,foto}){

              return(
                
                  <div>

                      <img src={foto} alt={props.nome} />
                      <h2>Nome: {nome}</h2>
                      <h2>Idade: {idade}</h2>
                      <h2>Profissão: {profissao}</h2>

                  </div>
                  

              )


          }

          export default Pessoa 

------------------------------------------------------------------------------------------
CSS MODULES 

   O arquivo que configura o css global da aplicação eo index.css que esta na pasta src 
   porem vale lembrar que centratlizar um css de uma aplicação em um unico arquivo pode causar
   problemas em relação a estrtura do codigo eo tamanho do css. um asolução e usar uma estrategia 
   chamada css modules onde é possivel aplicar o css a nivel de componente.Deixando o index.css 
   somente com as configurações padrão. 

   criando um css module para o componente Frase.js eu vou nomear assim Frase.module.css com isso o react
   ja sabe que esse css pertence ao componente Frase.js.

   ATENÇÃO 
     Embora o  Frase.module.css seja um css ele não aceita nome de classe usando ifem ou usa _ ou usa camel case 
     ifem ele não aceita.

   codigo do css module 

          .fraseContainer{
          
            background-color:#333;
            border:1px solid #111; 
        }

        .fraseContent{
            color:#fff;
            background-color:#333;
            margin:0;


        }

    aplicando o css no componente
    
---------------------------------------------------------------------------------------------------
              import styles from './Frase.module.css'




              function Frase(){

                  return(
                  <div className={styles.fraseContainer}>
                        <h1 className={styles.fraseContent} >Eu sou um componente com uma frase </h1>
                    </div>
                  )
              }
              export default Frase;



   










      



















